<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Hello World</title>
  <meta name="theme-color" content="red" />

  <!-- Fonts Performance Optimization -->
  <link rel="preconnect" href="https://fonts.googleapis.com" crossorigin>
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Cormorant&family=Oleo+Script&display=swap" rel="stylesheet">

  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    html, body {
      width: 100%;
      height: 100%;
      font-family: 'Cormorant', serif;
      background-color: rgb(191, 146, 233);
      scroll-behavior: smooth;
    }

    section {
      width: 100vw;
      height: 100vh;
    }

    .hero {
      height: 90vh;
      margin-top: 10vh;
      display: flex;
      justify-content: center;
      align-items: center;
    }

    .hero-text {
      margin: 0 50px;
      display: flex;
      flex-direction: column;
      align-items: center;
      text-align: center;
    }

    .hero-text h1 {
      color: black;
      font-size: 30px;
      line-height: 1.2;
      font-family: 'Oleo Script', cursive;
    }

    button {
      width: 200px;
      height: 50px;
      background: rgb(46, 46, 156);
      color: #fff;
      cursor: pointer;
      border: none;
      margin: 10px;
      font-size: 16px;
      display: flex;
      justify-content: center;
      align-items: center;
    }

    section p{
     text-align: center;
     font-size: 40px;
     margin:0 200px;
    }

    .gilvon {
      font-size: 30px;
      margin-left: 120px;
    }

    .box {
      height: 500px;
      display: flex;
      justify-content: center;
      align-items: center;
    }

    .box1, .box2, .box3 {
      width: 150px;
      height: 150px;
      background: rgb(0, 26, 255);
      margin: 5px;
    }

    .reveal-type .word {
  display: inline-block;
  white-space: nowrap;
}

.reveal-type .char {
  display: inline-block;
}

    

    @media (max-width: 500px) {
      .gilvon {
        margin-left: 40px;
      }
      section p{
          margin:0 50px;
      }
    }
  </style>
</head>

<body>
  <section>
    <h1 class="gilvon">[gïlvøn.]</h1>
    <div class="hero">
      <div class="hero-text">
        <h1 class="text">Complex tech problems? We handle them with the finesse of a skilled barber</h1>
        <button id="words">Words</button>
      </div>
    </div>
  </section>

  
  <section>
    <div class="box">
      <div class="box1"></div>
      <div class="box2"></div>
      <div class="box3"></div>
    </div>
  </section>

  <section></section>

 

    <section>
        <p class="reveal-type" data-bg-color="#b6b600" data-fg-color="black">Modern UI designers will expand their skillsets to include frontend.</p>
    </section>

    <section>
        <p class="reveal-type" data-bg-color="#353535" data-fg-color="red">The web isn't static anymore, interactivity and motion now dominate.</p>
    </section>


     <section>
        <p class="reveal-type" data-bg-color="#cccccc" data-fg-color="teal">Systematically ushering in a new generation of amazing designers from across .</p>
    </section>

  <!-- SplitType -->
  <script src="https://unpkg.com/split-type"></script>

  <!-- Lazy-load animation scripts -->
  <script type="module">
    document.addEventListener("DOMContentLoaded", async () => {
      const [{ default: Lenis }, { default: gsap }, { ScrollTrigger }] = await Promise.all([
        import("https://cdn.jsdelivr.net/npm/lenis@1.3.1"),
        import("https://cdn.skypack.dev/gsap"),
        import("https://cdn.skypack.dev/gsap/ScrollTrigger")
      ]);

      gsap.registerPlugin(ScrollTrigger);

      const lenis = new Lenis({ lerp: 0.1, smooth: true });
      lenis.on('scroll', ScrollTrigger.update);
      gsap.ticker.add(() => lenis.raf(performance.now()));
      gsap.ticker.lagSmoothing(0);

      gsap.from(".box1", {
        x: -300,
        duration: 1,
        ease: "elastic.out(1, 0.4)",
        scrollTrigger: {
          trigger: ".box1",
          start: "center center",
          end: "bottom 20%",
          toggleActions: "restart pause reverse pause"
        }
      });

     
      let split = new SplitType('.text', { types: 'words, chars, lines' });
      let animation;

      function resetAnimation() {
        if (animation) animation.kill();
        if (split) split.revert();
        split = new SplitType('.text', { types: 'words, chars, lines' });
      }

      document.querySelector("#words").addEventListener("click", () => {
        resetAnimation();
        animation = gsap.from(split.words, {
          y: -100,
          opacity: 0,
          rotation: gsap.utils.random(-80, 80),
          duration: 0.7,
          ease: "back",
          stagger: 0.15
        });
      });

      window.addEventListener("resize", () => {
        split.revert();
        split = new SplitType('.text', { types: 'words, chars, lines' });
      });



const splitTypes = document.querySelectorAll('.reveal-type')

        splitTypes.forEach((char,i) => {

            const bg = char.dataset.bgColor
            const fg = char.dataset.fgColor

            // const text = new SplitType(char, { types: 'chars'})

         const text=    new SplitType(char, { types: 'words, chars' })


            

            gsap.fromTo(text.chars, 
                {
                    color: bg,
                },
                {
                    color: fg,
                    duration: 0.3,
                    stagger: 0.02,
                    scrollTrigger: {
                        trigger: char,
                        start: 'top 80%',
                        end: 'top 20%',
                        scrub: true,
                        markers: false,
                        toggleActions: 'play play reverse reverse'
                    }
            })
        })

        function raf(time) {
        lenis.raf(time)
        requestAnimationFrame(raf)
        }
        requestAnimationFrame(raf)
    });

  </script>
</body>
</html>