<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Keyboard Page</title>

  <!-- Font preconnect (optional performance boost if loading web fonts) -->
  <link rel="preconnect" href="https://fonts.googleapis.com" crossorigin />

  <!-- Style moved to head for first paint performance -->
  <style>
    html, body {
      margin: 0;
      padding: 0;
      font-family: "Bricolage Grotesque", sans-serif;
      background-color: #4e17cf;
      height: 100%;
      overflow-x: hidden;
    }

    * { box-sizing: border-box; }

    .flex { display: flex; }
    .row { flex-direction: row; align-items: center; justify-content: space-between; }
    .column { flex-direction: column; align-items: flex-start; justify-content: center; }

    nav {
      width: 100%;
      padding: 1rem;
      z-index: 5;
      position: relative;
    }

    .bar {
      position: absolute;
      right: 0;
      top: 0;
      width: 0%;
      height: 100%;
      background-color: black;
      z-index: -5;
    }

    h1 {
      font-size: 10vw;
      font-weight: 800;
      line-height: 1;
      letter-spacing: -5px;
      color: white;
      position: absolute;
      top: calc(100vh - 50vw);
      left: 20px;
    }

    h2 {
      font-size: 40px;
      color: white;
      line-height: 1;
    }

    p {
      color: white;
      font-size: 18px;
      font-weight: 200;
      margin: 0;
    }

    button {
      padding: 20px 0;
      width: 100%;
      border-radius: 10px;
      border: 1px solid rgba(255, 255, 255, 0.4);
      background: transparent;
      color: white;
      font-size: 18px;
      font-weight: 200;
      cursor: pointer;
      transition: border 0.3s;
    }

    button:hover {
      border-color: white;
    }

    a {
      color: white;
      text-decoration: none;
    }

    .canvas-cont {
      position: fixed;
      z-index: 3;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      pointer-events: none;
    }

    #canvas3d {
      width: 100%;
      height: 100%;
    }

    #hero {
      height: 100vh;
    }

    #part1, #part2 {
      width: 100%;
      height: 150vh;
    }

    .part1-info, .part2-info {
      width: 30%;
      gap: 40px;
      padding: 1%;
    }

    #part3 {
      height: 120vh;
      display: flex;
      flex-direction: column;
      justify-content: flex-end;
      align-items: center;
      margin-bottom: 50px;
    }

    .keyboard .key {
      display: inline-block;
      letter-spacing: -2vw;
      transition: transform 0.2s;
    }

    @media (max-width: 1000px) {
      .canvas-cont {
        width: 200vw;
        transform: scale(0.5);
        top: 25vh;
      }

      h1 { top: 20vw; font-size: 15vw; }

      .part1-info, .part2-info {
        width: 100%;
      }

      h2 { font-size: 5vw; }
    }
  </style>
</head>
<body>

  <nav class="flex row">
    <!-- Simplified SVG Logo -->
    <svg width="85" height="29" viewBox="0 0 85 29" fill="none" xmlns="http://www.w3.org/2000/svg">
      <rect x="1.56152" y="1.56154" width="25.8769" height="25.8769" rx="12.9385" fill="white" />
      <rect x="29.2231" y="1.56154" width="25.8769" height="25.8769" rx="5.35385" fill="white" />
      <rect x="56.8846" y="1.56154" width="25.8769" height="25.8769" rx="0.892308" fill="white" />
    </svg>
    <a href="https://youtu.be/x3m1PGEfG5c" target="_blank">Watch on YouTube</a>
  </nav>

  <div class="bar"></div>

  <div class="canvas-cont"><canvas id="canvas3d"></canvas></div>

  <section id="hero" class="flex row">
    <h1>
      YOUR<br>GAMES.<br>YOUR<br>
      <span class="keyboard">
        <span class="key">K</span>
        <span class="key">E</span>
        <span class="key">Y</span>
        <span class="key">B</span>
        <span class="key">O</span>
        <span class="key">A</span>
        <span class="key">R</span>
        <span class="key">D</span>.
      </span>
    </h1>
  </section>

  <section id="part1" class="flex row">
    <div></div>
    <div class="part1-info flex column">
      <h2>PLAY LIKE A PRO.</h2>
      <p>With these keyboards, you'll get proper bounce, a bit of *click*, and lots of satisfaction.</p>
      <button>Make a keyboard - It's easy!</button>
    </div>
  </section>

  <section id="part2" class="flex row">
    <div class="part2-info flex column">
      <h2>CUSTOMIZE ALL THE WAY.</h2>
      <p>It's all yours! Change the colors as you like. Make them purple, green, red, anything.</p>
      <button>Customize a Keyboard</button>
    </div>
    <div></div>
  </section>

  <section id="part3" class="flex column">
    <h2>#Spline3DAndGSAPAnimations</h2>
    <a href="https://twitter.com/juxtopposed" target="_blank">By @Juxtopposed</a>
  </section>

  <!-- Async animation + runtime modules -->
  <script type="module" defer>
    document.addEventListener("DOMContentLoaded", async () => {
      const [
        { default: Lenis },
        { default: gsap },
        { ScrollTrigger },
        { Application }
      ] = await Promise.all([
        import("https://cdn.jsdelivr.net/npm/lenis@1.3.1"),
        import("https://cdn.skypack.dev/gsap"),
        import("https://cdn.skypack.dev/gsap/ScrollTrigger"),
        import("https://cdn.skypack.dev/@splinetool/runtime@0.9.416")
      ]);

      gsap.registerPlugin(ScrollTrigger);

      const lenis = new Lenis();
      const canvas = document.getElementById("canvas3d");
      const app = new Application(canvas);

      function raf(time) {
        lenis.raf(time);
        requestAnimationFrame(raf);
      }
      requestAnimationFrame(raf);

      await app.load("https://prod.spline.design/ZZOWNi4tS7p8xxOs/scene.splinecode");
      const keyboard = app.findObjectByName("keyboard");

      gsap.set(keyboard.scale, { x: 1, y: 1, z: 1 });
      gsap.set(keyboard.position, { x: 110, y: 50 });

      const rotateKeyboard = gsap.to(keyboard.rotation, {
        y: Math.PI * 2 + keyboard.rotation.y,
        duration: 10,
        repeat: -1,
        ease: "none"
      });

      let interval;

      gsap.timeline({
        scrollTrigger: {
          trigger: "#part1",
          start: "top 60%",
          end: "bottom bottom",
          scrub: true,
          onEnter: () => {
            interval = setInterval(() => app.emitEvent("keyDown", "keyboard"), 1500);
            rotateKeyboard.pause();
            gsap.to(keyboard.rotation, { y: Math.PI / 12, duration: 1 });
          },
          onLeaveBack: () => {
            rotateKeyboard.resume();
            clearInterval(interval);
          }
        }
      })
      .to(keyboard.rotation, { x: -Math.PI / 14, z: Math.PI / 36 }, 0)
      .to(keyboard.position, { x: -500, y: -200 }, 0)
      .to(keyboard.scale, { x: 3, y: 3, z: 3 }, 0);

      gsap.timeline({
        onComplete: () => {
          clearInterval(interval);
          app.emitEvent("mouseDown", "keyboard");
        },
        scrollTrigger: {
          trigger: "#part2",
          start: "top bottom",
          end: "center bottom",
          scrub: true
        }
      })
      .to(keyboard.rotation, { x: Math.PI / 36, y: -Math.PI / 10 }, 0)
      .to(keyboard.position, { x: 150, y: 50 }, 0)
      .to(keyboard.scale, { x: 0.8, y: 0.8, z: 0.8 }, 0);
    });
  </script>
</body>
</html>
