<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>

    <!-- note: it might take a (little) while for Spline to load. -->

    <style>
        body {
  background-color: #4e17cf;

  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: flex-start;
  position: relative;
  margin: 0;
  padding: 20px;
  overflow-x: hidden;
}

* {
  font-family: "Bricolage Grotesque", sans-serif;
}

.flex {
  display: flex;
}

.flex.row {
  flex-direction: row;
  align-items: center;
  justify-content: space-between;
}

.flex.column {
  flex-direction: column;
  align-items: flex-start;
  justify-content: center;
}

.canvas-cont {
  position: fixed;
  z-index: 3;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  pointer-events: none;
}

#canvas3d {
  width: 100%;
  height: 100%;
}

nav {
  width: 100%;
}

p {
  margin: 0;
  font-size: 18px;
  font-weight: 200;
  color: white;
}

.bar {
  height: 100%;
  width: 0%;
  position: absolute;
  right: 0;
  top: 0;
  background-color: black;
  z-index: -5;
}

h1 {
  font-size: 10vw;
  position: absolute;
  top: calc(100vh - 50vw);
  font-weight: 800;
  left: 20px;
  line-height: 1;
  letter-spacing: -5px;
  color: white;
}

h2 {
  font-size: 40px;
  line-height: 1;
  color: white;
}

#hero {
  height: 100vh;
}

#part1 {
  width: 100%;
  height: 150vh;
}

.part1-info,
.part2-info {
  width: 30%;
  gap: 40px;
  padding: 1%;
}

button {
  border: 1px solid rgba(255, 255, 255, 0.4);
  background-color: transparent;
  font-size: 18px;
  font-weight: 200;
  width: 100%;
  border-radius: 10px;
  padding: 20px 0;
  cursor: pointer;
  color: white;
}

button:hover {
  border: 1px solid white;
}

#part2 {
  height: 150vh;
  width: 100%;
}

#part3 {
  height: 120vh;
  justify-content: flex-end !important;
  align-items: center !important;
  margin-bottom: 50px;
}

a {
  color: white;
}

.scroll-icon {
  height: 50px;
  width: 35px;
  border: 1px solid white;
  border-radius: 100px;
  padding: 5px 14px 20px 14px;
  box-sizing: border-box;
}

.scroll {
  height: 10px;
  width: 5px;
  border-radius: 10px;
  background-color: white;
}

.key {
  display: inline-block;
  letter-spacing: -2vw;
  transition: transform 0.2s;
}

@keyframes pressDown {
  0%,
  100% {
    transform: translateY(0);
  }
  50% {
    transform: translateY(10px);
  }
}

@media screen and (max-width: 1000px) {
  .canvas-cont {
    width: 200vw;
    transform: scale(0.5);
    left: auto;
    top: 25vh;
  }

  h1 {
    top: 20vw;
    font-size: 15vw;
  }

  .part1-info,
  .part2-info {
    width: 100%;
  }

  h2 {
    font-size: 5vw;
  }
}
    </style>

<nav class="flex row">
  <!--  made-up logo  -->
  <svg width="85" height="29" viewBox="0 0 85 29" fill="none" xmlns="http://www.w3.org/2000/svg">
    <rect x="0.111538" y="0.111538" width="84.1" height="28.7769" rx="1.67308" stroke="white" stroke-opacity="0.1" stroke-width="0.223077" />
    <rect x="1.56152" y="1.56154" width="25.8769" height="25.8769" rx="12.9385" fill="white" />
    <rect x="1.67306" y="1.67308" width="25.6538" height="25.6538" rx="12.8269" stroke="white" stroke-opacity="0.1" stroke-width="0.223077" />
    <rect x="29.2231" y="1.56154" width="25.8769" height="25.8769" rx="5.35385" fill="white" />
    <rect x="29.3346" y="1.67308" width="25.6538" height="25.6538" rx="5.24231" stroke="white" stroke-opacity="0.1" stroke-width="0.223077" />
    <rect x="56.8846" y="1.56154" width="25.8769" height="25.8769" rx="0.892308" fill="white" />
    <rect x="56.9962" y="1.67308" width="25.6538" height="25.6538" rx="0.780769" stroke="white" stroke-opacity="0.1" stroke-width="0.223077" />
    <rect x="12.9385" y="18.9615" width="2.9" height="5.13077" rx="1.45" fill="#7317cf" />
    <rect x="13.05" y="19.0731" width="2.67692" height="4.90769" rx="1.33846" stroke="white" stroke-opacity="0.1" stroke-width="0.223077" />
  </svg>

  <a href="https://youtu.be/x3m1PGEfG5c" target=”_blank”>Watch on Youtube</a>
</nav>

<div class="bar"></div>

<div class="canvas-cont">
  <canvas id="canvas3d"></canvas>
</div>

<div id="hero" class="flex row">
  <h1>YOUR<br>GAMES.<br>YOUR<br>
    <div class="keyboard">
      <span class="key">K</span>
      <span class="key">E</span>
      <span class="key">Y</span>
      <span class="key">B</span>
      <span class="key">O</span>
      <span class="key">A</span>
      <span class="key">R</span>
      <span class="key">D</span>
      .
    </div>
    
  </h1>
</div>

<div id="part1" class="flex row">
  <div></div>
  <div class="part1-info flex column">
    <h2>PLAY LIKE A PRO.</h2>
    <p>With these keyboards, you'll get proper bounce, a bit of *click*, and lots of satisfaction.</p>
    <button>Make a keyboard - It's easy!</button>
  </div>
</div>

<div id="part2" class="flex row">
  <div class="part2-info flex column">
    <h2>CUSTOMIZE ALL THE WAY.</h2>
    <p>It's all yours! Change the colors as you like. Make them purple, green, red, anything.</p>

    <button>Customize a Keyboard</button>
  </div>
  <div></div>
</div>

<div id="part3" class="flex column">
  <h2>#Spline3DAndGSAPAnimations</h2>
  <a href="https://twitter.com/juxtopposed" target="_blank">By @Juxtopposed</a>
</div>



    <script type="module">
  document.addEventListener("DOMContentLoaded", async () => {
    const [
      { default: Lenis },
      { default: gsap },
      { ScrollTrigger },
      { Application }
    ] = await Promise.all([
      import("https://cdn.jsdelivr.net/npm/lenis@1.3.1"),
      import("https://cdn.skypack.dev/gsap"),
      import("https://cdn.skypack.dev/gsap/ScrollTrigger"),
      import("https://cdn.skypack.dev/@splinetool/runtime@0.9.416")
    ]);

    gsap.registerPlugin(ScrollTrigger);

    // Smooth scrolling
    const lenis = new Lenis();
    function raf(time) {
      lenis.raf(time);
      requestAnimationFrame(raf);
    }
    requestAnimationFrame(raf);

    // Spline 3D setup
    const canvas = document.getElementById("canvas3d");
    const app = new Application(canvas);

    app.load("https://prod.spline.design/ZZOWNi4tS7p8xxOs/scene.splinecode").then(() => {
      const keyboard = app.findObjectByName("keyboard");


     
      gsap.set(keyboard.scale, { x: 1, y: 1, z: 1 });
      gsap.set(keyboard.position, { x: 110, y: 50 });

      const rotateKeyboard = gsap.to(keyboard.rotation, {
        y: Math.PI * 2 + keyboard.rotation.y,
        x: 0,
        z: 0,
        duration: 10,
        repeat: -1,
        ease: "none"
      });

      let rotationProgress = 0;
      let interval;

      // Scroll-triggered timeline for part1
      gsap.timeline({
        scrollTrigger: {
          trigger: "#part1",
          start: "top 60%",
          end: "bottom bottom",
          scrub: true,
          onEnter: () => {
            rotationProgress = rotateKeyboard.progress();
            interval = setInterval(() => {
              app.emitEvent("keyDown", "keyboard");
            }, 1500);

            rotateKeyboard.pause();
            gsap.to(keyboard.rotation, { y: Math.PI / 12, duration: 1 });
          },
          onLeaveBack: () => {
            const newProgress = keyboard.rotation.y / (Math.PI * 2);
            rotateKeyboard.progress(newProgress).resume();
            clearInterval(interval);
          }
        }
      })
      .to(keyboard.rotation, { x: -Math.PI / 14, z: Math.PI / 36 }, 0)
      .to(keyboard.position, { x: -500, y: -200 }, 0)
      .to(keyboard.scale, { x: 3, y: 3, z: 3 }, 0);

      // Scroll-triggered timeline for part2
      gsap.timeline({
        onComplete: () => {
          clearInterval(interval);
          app.emitEvent("mouseDown", "keyboard");
        },
        scrollTrigger: {
          trigger: "#part2",
          start: "top bottom",
          end: "center bottom",
          scrub: true
        }
      })
      .to(keyboard.rotation, { x: Math.PI / 36, y: -Math.PI / 10 }, 0)
      .to(keyboard.position, { x: 150, y: 50 }, 0)
      .to(keyboard.scale, { x: 0.8, y: 0.8, z: 0.8 }, 0);

      // Scroll-triggered timeline for part3
      gsap.timeline({
        scrollTrigger: {
          trigger: "#part3",
          start: "top bottom",
          end: "bottom bottom",
          scrub: true
        }
      })
      .to(keyboard.position, { x: 0, y: 0 }, 0);
    });

    // Background progress bar
    function animateBar(triggerElement, onEnterWidth, onLeaveBackWidth) {
      gsap.to(".bar", {
        scrollTrigger: {
          trigger: triggerElement,
          start: "top center",
          end: "bottom bottom",
          scrub: true,
          onEnter: () => {
            gsap.to(".bar", {
              width: onEnterWidth,
              duration: 0.2,
              ease: "none"
            });
          },
          onLeaveBack: () => {
            gsap.to(".bar", {
              width: onLeaveBackWidth,
              duration: 0.2,
              ease: "none"
            });
          }
        }
      });
    }

    animateBar("#part1", "35%", "0%");
    animateBar("#part2", "65%", "35%");
    animateBar("#part3", "100%", "65%");

    // Keyboard key press effect
    const keys = document.querySelectorAll(".key");
    function pressRandomKey() {
      const randomKey = keys[Math.floor(Math.random() * keys.length)];
      randomKey.style.animation = "pressDown 0.2s ease-in-out";

      randomKey.onanimationend = () => {
        randomKey.style.animation = "";
        setTimeout(pressRandomKey, 100 + Math.random() * 300);
      };
    }

    pressRandomKey();
  });
</script>

</body>
</html>