<!-- <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link href="https://fonts.googleapis.com/css2?family=Cormorant&family=Oleo+Script&display=swap" rel="stylesheet">
</head>
<body>
    <style>
       @import url('https://fonts.googleapis.com/css2?family=Geist:wght@100..900&display=swap');
@import url('https://unpkg.com/normalize.css') layer(normalize);

@layer normalize, base, demo, stick, effect, scrollbar, debug;

@layer debug {
  [data-debug='true'] li {
    outline: 0.05em dashed currentColor;
  }

  [data-debug='true'] :is(h2, li:last-of-type) {
    outline: 0.05em dashed canvasText;
  }
}

@layer scrollbar {
  @property --hue {
    initial-value: 0;
    syntax: '<number>';
    inherits: false;
  }

  @property --chroma {
    initial-value: 0;
    syntax: '<number>';
    inherits: true;
  }

  [data-sync-scrollbar='true'] {
    scrollbar-color: oklch(var(--lightness) var(--chroma) var(--hue)) #0000;
  }

  @supports (animation-timeline: scroll()) and (animation-range: 0% 100%) {
    [data-sync-scrollbar='true'][data-animate='true'] {
      timeline-scope: --list;
      scrollbar-color: oklch(var(--lightness) var(--chroma, 0) var(--hue)) #0000;
      animation-name: change, chroma-on, chroma-off;
      animation-fill-mode: both;
      animation-timing-function: linear;
      animation-range: entry 50% exit 50%, entry 40% entry 50%, exit 30% exit 40%;
      animation-timeline: --list;
    }

    /* FIXED: view-timeline declaration moved outside invalid nesting */
    [data-sync-scrollbar='true'][data-animate='true'] ul {
      view-timeline: --list;
    }
  }

  @keyframes change {
    to {
      --hue: var(--end);
    }
  }

  @keyframes chroma-on {
    to {
      --chroma: 0.3;
    }
  }

  @keyframes chroma-off {
    to {
      --chroma: 0;
    }
  }
}

@layer effect {
  :root {
    --start: 0;
    --end: 360;
    --lightness: 65%;
    --base-chroma: 0.3;
  }

  [data-theme='dark'] {
    --lightness: 75%;
  }

  [data-theme='light'] {
    --lightness: 65%;
  }

  @media (prefers-color-scheme: dark) {
    :root {
      --lightness: 75%;
    }
  }

  ul {
    --step: calc((var(--end) - var(--start)) / (var(--count) - 1));
  }

  li:not(:last-of-type) {
    color: oklch(var(--lightness) var(--base-chroma) calc(var(--start) + (var(--step) * var(--i))));
  }

  @supports (animation-timeline: scroll()) and (animation-range: 0% 100%) {
    [data-animate='true'] li {
      opacity: 0.2;
      animation-name: brighten;
      animation-fill-mode: both;
      animation-timing-function: linear;
      animation-range: cover calc(50% - 1lh) calc(50% + 1lh);
      animation-timeline: view();
    }

    [data-animate='true'] li:first-of-type {
      --start-opacity: 1;
    }

    [data-animate='true'] li:last-of-type {
      --brightness: 1;
      --end-opacity: 1;
    }

    @keyframes brighten {
      0% {
        opacity: var(--start-opacity, 0.2);
      }
      50% {
        opacity: 1;
        filter: brightness(var(--brightness, 1.2));
      }
      100% {
        opacity: var(--end-opacity, 0.2);
      }
    }
  }
}

@layer stick {
  section:first-of-type {
    --font-level: 6;
    display: flex;
    line-height: 1.25;
    width: 100%;
    padding-left: 5rem;
  }

  section:last-of-type {
    min-height: 100vh;
    display: flex;
    place-items: center;
    width: 100%;
    justify-content: center;
  }

  section:last-of-type h2 {
    --font-level: 6;
  }

  main {
    width: 100%;
  }

  section:first-of-type h2 {
    position: sticky;
    top: calc(50% - 0.5lh);
    font-size: inherit;
    margin: 0;
    display: inline-block;
    height: fit-content;
    font-weight: 400;
    font-size: 60px;
    white-space: nowrap;
    margin-left: 100px;
    /* FIXED: Ensure sticky element doesn't cause overflow */
    flex-shrink: 0;
  }

  li{
    font-size: 60px;
    font-weight: 400;
    /* FIXED: Allow text wrapping on smaller screens */
    white-space: nowrap;
  }

  ul {
    font-weight: 600;
    padding-inline: 0;
    margin: 0;
    list-style-type: none;
    /* FIXED: Ensure ul doesn't overflow */
    width: 100%;
    max-width: 100%;
  }

  [data-snap='true'] {
    scroll-snap-type: y proximity;
  }

  [data-snap='true'] li {
    scroll-snap-align: center;
  }

  h2,
  li:last-of-type {
    background: linear-gradient(
      canvasText 50%,
      color-mix(in oklch, canvas, canvasText 25%)
    );
    background-clip: text;
    color: #0000;
  }
}

@layer demo {
  header {
    min-height: 100vh;
    display: flex;
    place-items: center;
    width: 100%;
    padding-inline: 5rem;
  }

  footer {
    padding-block: 2rem;
    opacity: 0.5;
  }

  h1 {
    --font-size-min: 24;
    --font-level: 8;
    text-wrap: pretty;
    line-height: 0.8;
    margin: 0;
    background: linear-gradient(
      canvasText 60%,
      color-mix(in oklch, canvas, canvasText)
    );
    background-clip: text;
    color: #0000;
  }
}

@layer base {
  :root {
    --font-size-min: 14;
    --font-size-max: 20;
    --font-ratio-min: 1.1;
    --font-ratio-max: 1.33;
    --font-width-min: 375;
    --font-width-max: 1500;
  }
  
  html {
    color-scheme: light dark;
  }

  [data-theme='light'] {
    color-scheme: light only;
  }

  [data-theme='dark'] {
    color-scheme: dark only;
  }

  :where(.fluid) {
    --fluid-min: calc(var(--font-size-min) * pow(var(--font-ratio-min), var(--font-level, 0)));
    --fluid-max: calc(var(--font-size-max) * pow(var(--font-ratio-max), var(--font-level, 0)));
    --fluid-preferred: calc((var(--fluid-max) - var(--fluid-min)) / (var(--font-width-max) - var(--font-width-min)));
    --fluid-type: clamp(
      (var(--fluid-min) / 16) * 1rem,
      ((var(--fluid-min) / 16) * 1rem) -
      (((var(--fluid-preferred) * var(--font-width-min)) / 16) * 1rem) +
      (var(--fluid-preferred) * var(--variable-unit, 100vi)),
      (var(--fluid-max) / 16) * 1rem
    );
    font-size: var(--fluid-type);
  }

  *,
  *::after,
  *::before {
    box-sizing: border-box;
  }

  body {
    display: grid;
    place-items: center;
    background: linear-gradient(to right,rgb(48, 0, 82),black);
    font-family: 'Geist', 'SF Pro Text', 'SF Pro Icons', 'AOS Icons', 'Helvetica Neue', Helvetica, Arial, sans-serif, system-ui;
  }

  body::before {
    --size: 45px;
    --line: color-mix(in hsl, canvasText, transparent 70%);
    content: '';
    height: 100vh;
    width: 100%!important;
    position: fixed;
    background:
      linear-gradient(90deg, var(--line) 1px, transparent 1px var(--size)) 50% 50% / var(--size) var(--size),
      linear-gradient(var(--line) 1px, transparent 1px var(--size)) 50% 50% / var(--size) var(--size);
    mask: linear-gradient(-20deg, transparent 50%, white);
    top: 0;
    transform-style: flat;
    pointer-events: none;
    z-index: -1;
  }

  .bear-link {
    color: canvasText;
    position: fixed;
    top: 1rem;
    left: 1rem;
    width: 48px;
    aspect-ratio: 1;
    display: grid;
    place-items: center;
    opacity: 0.8;
  }

  .ins{
    color:orange;
    font-size: 18px;
  }

  :where(.x-link, .bear-link):is(:hover, :focus-visible) {
    opacity: 1;
  }

  .bear-link svg {
    width: 75%;
  }

  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border-width: 0;
  }
}

div.tp-dfwv {
  position: fixed;
}

/* FIXED: Better responsive design - Apply overflow control only where needed */
@media (max-width: 768px) {
  /* FIXED: Add overflow control only to body on mobile to prevent horizontal scroll */
  body {
    overflow-x: hidden;
  }

  [data-snap='true'] {
    scroll-snap-type: none !important;
  }

  .hed{
    font-size: 35px!important;
  }
 
  li{
    font-size: 18px;
    /* FIXED: Allow text to wrap on mobile and prevent overflow */
    white-space: normal;
    word-wrap: break-word;
    hyphens: auto;
    max-width: calc(100vw - 40px);
  }

  section:first-of-type h2{
    font-size: 18px;
    margin-left: -30px; 
    display: flex;
    /* FIXED: Prevent sticky header from overflowing */
    max-width: calc(100vw - 40px);
  }

  section:first-of-type {
    padding-left: 2rem;
    padding-right: 2rem;
  }

  header {
    padding-inline: 2rem;
  }

  /* FIXED: Ensure content section doesn't overflow */
  .content {
    width: 100%;
    max-width: 100vw;
    box-sizing: border-box;
  }
}

/* FIXED: Additional responsive breakpoint for very small screens */
@media (max-width: 480px) {
  /* Maintain overflow control on body */
  body {
    overflow-x: hidden;
  }

  li {
    font-size: 16px;
    max-width: calc(100vw - 20px);
  }

  section:first-of-type h2 {
    font-size: 16px;
    max-width: calc(100vw - 20px);
  }

  section:first-of-type {
    padding-left: 1rem;
    padding-right: 1rem;
  }

  header {
    padding-inline: 1rem;
  }
}

.hed{
    font-size: 60px;
    color:white;
    font-family: 'Oleo Script', cursive;
    line-height: 150%;
}

.fluid{
  /* background: red; */
}
    </style>

    <header>
      <h1 class="fluid hed">
        
       Complex tech problems?
        <br />
       <span class="ins">
         We solve them with the finesse of a skilled barber.
        </span> </h1>
    </header>
    <main>
      <section class="content fluid">
        <h2><span aria-hidden="true">We build &nbsp;</span>
          <span class="sr-only">you can ship things.</span>
        </h2>
     <ul aria-hidden="true" style="--count: 21">
  <li style="--i: 0">custom software solutions.</li>
  <li style="--i: 1">scalable digital platforms.</li>
  <li style="--i: 2">smart automation tools.</li>
  <li style="--i: 3">modern user interfaces.</li>
  <li style="--i: 4">clean, maintainable code.</li>
  <li style="--i: 5">robust security systems.</li>
  <li style="--i: 6">fast cloud deployments.</li>
  <li style="--i: 7">real-time data dashboards.</li>
  <li style="--i: 8">integrated business tools.</li>
  <li style="--i: 9">intuitive mobile apps.</li>
  <li style="--i: 10">AI-powered solutions.</li>
  <li style="--i: 11">cross-platform products.</li>
  <li style="--i: 12">high-performance websites.</li>
  <li style="--i: 13">secure payment systems.</li>
  <li style="--i: 14">custom CRM solutions.</li>
  <li style="--i: 15">powerful SaaS products.</li>
  <li style="--i: 16">mission-critical systems.</li>
  <li style="--i: 17">backends that scale.</li>
  <li style="--i: 18">tools that save time.</li>
  <li style="--i: 19">responsive UI components.</li>
  <li style="--i: 20">API-driven ecosystems.</li>
</ul>

      </section>
      <section>
        <h2 class="fluid">Solved.</h2>
      </section>
    </main>
    <footer>ʕ⊙ᴥ⊙ʔ Gilvon Software Solutions &copy; 2025</footer>
   

  <script type="module" is:inline>
  document.addEventListener("DOMContentLoaded", async () => {
    const [
      { Pane },
      { default: gsap },
      { default: ScrollTrigger },
      { default: Lenis }
    ] = await Promise.all([
      import("https://cdn.skypack.dev/tweakpane@4.0.4"),
      import("https://cdn.skypack.dev/gsap@3.12.0"),
      import("https://cdn.skypack.dev/gsap@3.12.0/ScrollTrigger"),
      import("https://cdn.jsdelivr.net/npm/lenis@1.3.1")
    ]);

    gsap.registerPlugin(ScrollTrigger);

    const lenis = new Lenis({
      lerp: 0.1,
      smooth: true
    });

    lenis.on('scroll', ScrollTrigger.update);
    gsap.ticker.add((time) => {
      lenis.raf(time * 1000); // GSAP uses seconds; Lenis uses ms
    });
    gsap.ticker.lagSmoothing(0);

    const config = {
      theme: 'dark',
      animate: true,
      snap: true,
      start: gsap.utils.random(0, 100, 1),
      end: gsap.utils.random(900, 1000, 1),
      scroll: true,
      debug: false,
    };

    let items;
    let scrollerScrub;
    let dimmerScrub;
    let chromaEntry;
    let chromaExit;

    const update = () => {
      document.documentElement.dataset.theme = config.theme;
      document.documentElement.dataset.syncScrollbar = config.scroll;
      document.documentElement.dataset.animate = config.animate;
      document.documentElement.dataset.snap = config.snap;
      document.documentElement.dataset.debug = config.debug;
      document.documentElement.style.setProperty('--start', config.start);
      document.documentElement.style.setProperty('--hue', config.start);
      document.documentElement.style.setProperty('--end', config.end);

      if (!config.animate) {
        chromaEntry?.scrollTrigger.disable(true, false);
        chromaExit?.scrollTrigger.disable(true, false);
        dimmerScrub?.disable(true, false);
        scrollerScrub?.disable(true, false);
        gsap.set(items, { opacity: 1 });
        gsap.set(document.documentElement, { '--chroma': 0 });
      } else {
        gsap.set(items, { opacity: (i) => (i !== 0 ? 0.2 : 1) });
        dimmerScrub.enable(true, true);
        scrollerScrub.enable(true, true);
        chromaEntry.scrollTrigger.enable(true, true);
        chromaExit.scrollTrigger.enable(true, true);
      }
    };

    const sync = (event) => {
      if (
        !document.startViewTransition ||
        event.target.controller.view.labelElement.innerText !== 'Theme'
      ) return update();
      document.startViewTransition(() => update());
    };

    if (
      !CSS.supports('(animation-timeline: scroll()) and (animation-range: 0% 100%)')
    ) {
      items = gsap.utils.toArray('ul li');

      gsap.set(items, { opacity: (i) => (i !== 0 ? 0.2 : 1) });

      const dimmer = gsap
        .timeline()
        .to(items.slice(1), {
          opacity: 1,
          stagger: 0.5,
        })
        .to(
          items.slice(0, items.length - 1),
          {
            opacity: 0.2,
            stagger: 0.5,
          },
          0
        );

      dimmerScrub = ScrollTrigger.create({
        trigger: items[0],
        endTrigger: items[items.length - 1],
        start: 'center center',
        end: 'center center',
        animation: dimmer,
        scrub: 0.2,
      });

      const scroller = gsap.timeline().fromTo(
        document.documentElement,
        {
          '--hue': config.start,
        },
        {
          '--hue': config.end,
          ease: 'none',
        }
      );

      scrollerScrub = ScrollTrigger.create({
        trigger: items[0],
        endTrigger: items[items.length - 1],
        start: 'center center',
        end: 'center center',
        animation: scroller,
        scrub: 0.2,
      });

      chromaEntry = gsap.fromTo(
        document.documentElement,
        {
          '--chroma': 0,
        },
        {
          '--chroma': 0.3,
          ease: 'none',
          scrollTrigger: {
            scrub: 0.2,
            trigger: items[0],
            start: 'center center+=40',
            end: 'center center',
          },
        }
      );

      chromaExit = gsap.fromTo(
        document.documentElement,
        {
          '--chroma': 0.3,
        },
        {
          '--chroma': 0,
          ease: 'none',
          scrollTrigger: {
            scrub: 0.2,
            trigger: items[items.length - 2],
            start: 'center center',
            end: 'center center-=40',
          },
        }
      );
    }

    update();
  });
</script>
</body>
</html> -->

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Professional Scroll Animation</title>
    <link href="https://fonts.googleapis.com/css2?family=Cormorant&family=Oleo+Script&display=swap" rel="stylesheet">
</head>
<body>
    <style>
       @import url('https://fonts.googleapis.com/css2?family=Geist:wght@100..900&display=swap');
@import url('https://unpkg.com/normalize.css') layer(normalize);

@layer normalize, base, demo, stick, effect, scrollbar, debug;

@layer debug {
  [data-debug='true'] li {
    outline: 0.05em dashed currentColor;
  }

  [data-debug='true'] :is(h2, li:last-of-type) {
    outline: 0.05em dashed canvasText;
  }
}

@layer scrollbar {
  @property --hue {
    initial-value: 0;
    syntax: '<number>';
    inherits: false;
  }

  @property --chroma {
    initial-value: 0;
    syntax: '<number>';
    inherits: true;
  }

  [data-sync-scrollbar='true'] {
    scrollbar-color: oklch(var(--lightness) var(--chroma) var(--hue)) #0000;
  }

  @supports (animation-timeline: scroll()) and (animation-range: 0% 100%) {
    [data-sync-scrollbar='true'][data-animate='true'] {
      timeline-scope: --list;
      scrollbar-color: oklch(var(--lightness) var(--chroma, 0) var(--hue)) #0000;
      animation-name: change, chroma-on, chroma-off;
      animation-fill-mode: both;
      animation-timing-function: linear;
      animation-range: entry 50% exit 50%, entry 40% entry 50%, exit 30% exit 40%;
      animation-timeline: --list;
    }

    [data-sync-scrollbar='true'][data-animate='true'] ul {
      view-timeline: --list;
    }
  }

  @keyframes change {
    to {
      --hue: var(--end);
    }
  }

  @keyframes chroma-on {
    to {
      --chroma: 0.3;
    }
  }

  @keyframes chroma-off {
    to {
      --chroma: 0;
    }
  }
}

@layer effect {
  :root {
    --start: 0;
    --end: 360;
    --lightness: 65%;
    --base-chroma: 0.3;
  }

  [data-theme='dark'] {
    --lightness: 75%;
  }

  [data-theme='light'] {
    --lightness: 65%;
  }

  @media (prefers-color-scheme: dark) {
    :root {
      --lightness: 75%;
    }
  }

  ul {
    --step: calc((var(--end) - var(--start)) / (var(--count) - 1));
  }

  li:not(:last-of-type) {
    color: oklch(var(--lightness) var(--base-chroma) calc(var(--start) + (var(--step) * var(--i))));
  }

  @supports (animation-timeline: scroll()) and (animation-range: 0% 100%) {
    [data-animate='true'] li {
      opacity: 0.15;
      transform: translateY(20px);
      filter: blur(2px);
      animation-name: brighten, slideIn, focusIn;
      animation-fill-mode: both;
      animation-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
      animation-range: cover calc(50% - 1.5lh) calc(50% + 1.5lh);
      animation-timeline: view();
      transition: all 0.6s cubic-bezier(0.4, 0, 0.2, 1);
    }

    [data-animate='true'] li:first-of-type {
      --start-opacity: 1;
      transform: translateY(0);
      filter: blur(0);
    }

    [data-animate='true'] li:last-of-type {
      --brightness: 1;
      --end-opacity: 1;
    }

    @keyframes brighten {
      0% {
        opacity: var(--start-opacity, 0.15);
      }
      50% {
        opacity: 1;
        filter: brightness(var(--brightness, 1.3)) saturate(1.2);
      }
      100% {
        opacity: var(--end-opacity, 0.15);
      }
    }

    @keyframes slideIn {
      0% {
        transform: translateY(30px) scale(0.95);
      }
      50% {
        transform: translateY(0) scale(1.02);
      }
      100% {
        transform: translateY(-10px) scale(0.98);
      }
    }

    @keyframes focusIn {
      0% {
        filter: blur(3px);
      }
      50% {
        filter: blur(0) drop-shadow(0 0 20px rgba(255, 255, 255, 0.3));
      }
      100% {
        filter: blur(1px);
      }
    }
  }
}

@layer stick {
  section:first-of-type {
    --font-level: 6;
    display: flex;
    line-height: 1.25;
    width: 100%;
    padding-left: 5rem;
  }

  section:last-of-type {
    min-height: 100vh;
    display: flex;
    place-items: center;
    width: 100%;
    justify-content: center;
  }

  section:last-of-type h2 {
    --font-level: 6;
  }

  main {
    width: 100%;
  }

  section:first-of-type h2 {
    position: sticky;
    top: calc(50% - 0.5lh);
    font-size: inherit;
    margin: 0;
    display: inline-block;
    height: fit-content;
    font-weight: 500;
    font-size: 60px;
    white-space: nowrap;
    margin-left: 100px;
    flex-shrink: 0;
    text-shadow: 0 0 30px rgba(255, 255, 255, 0.4);
    letter-spacing: -0.02em;
    transition: all 0.3s ease;
  }

  section:first-of-type h2:hover {
    text-shadow: 0 0 40px rgba(255, 255, 255, 0.6);
    transform: scale(1.02);
  }

  li{
    font-size: 60px;
    font-weight: 400;
    white-space: nowrap;
    letter-spacing: -0.01em;
    position: relative;
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
  }

  li::before {
    content: '';
    position: absolute;
    left: -10px;
    top: 50%;
    transform: translateY(-50%);
    width: 4px;
    height: 0;
    background: linear-gradient(45deg, #ff6b6b, #4ecdc4);
    border-radius: 2px;
    transition: height 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    opacity: 0;
  }

  [data-animate='true'] li.active::before {
    height: 60%;
    opacity: 1;
  }

  ul {
    font-weight: 600;
    padding-inline: 0;
    margin: 0;
    list-style-type: none;
    width: 100%;
    max-width: 100%;
  }

  [data-snap='true'] {
    scroll-snap-type: y proximity;
  }

  [data-snap='true'] li {
    scroll-snap-align: center;
  }

  h2,
  li:last-of-type {
    background: linear-gradient(
      135deg,
      canvasText 30%,
      color-mix(in oklch, canvas, canvasText 25%) 70%
    );
    background-clip: text;
    color: #0000;
  }
}

@layer demo {
  header {
    min-height: 100vh;
    display: flex;
    place-items: center;
    width: 100%;
    padding-inline: 5rem;
    background: radial-gradient(ellipse at center, rgba(255,255,255,0.1) 0%, transparent 70%);
  }

  footer {
    padding-block: 2rem;
    opacity: 0.5;
    text-align: center;
    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.1), transparent);
    backdrop-filter: blur(10px);
  }

  h1 {
    --font-size-min: 24;
    --font-level: 8;
    text-wrap: pretty;
    line-height: 0.8;
    margin: 0;
    background: linear-gradient(
      135deg,
      canvasText 40%,
      color-mix(in oklch, canvas, canvasText) 100%
    );
    background-clip: text;
    color: #0000;
    animation: fadeInUp 1s ease-out;
  }

  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
}

@layer base {
  :root {
    --font-size-min: 14;
    --font-size-max: 20;
    --font-ratio-min: 1.1;
    --font-ratio-max: 1.33;
    --font-width-min: 375;
    --font-width-max: 1500;
  }
  
  html {
    color-scheme: light dark;
    scroll-behavior: smooth;
  }

  [data-theme='light'] {
    color-scheme: light only;
  }

  [data-theme='dark'] {
    color-scheme: dark only;
  }

  :where(.fluid) {
    --fluid-min: calc(var(--font-size-min) * pow(var(--font-ratio-min), var(--font-level, 0)));
    --fluid-max: calc(var(--font-size-max) * pow(var(--font-ratio-max), var(--font-level, 0)));
    --fluid-preferred: calc((var(--fluid-max) - var(--fluid-min)) / (var(--font-width-max) - var(--font-width-min)));
    --fluid-type: clamp(
      (var(--fluid-min) / 16) * 1rem,
      ((var(--fluid-min) / 16) * 1rem) -
      (((var(--fluid-preferred) * var(--font-width-min)) / 16) * 1rem) +
      (var(--fluid-preferred) * var(--variable-unit, 100vi)),
      (var(--fluid-max) / 16) * 1rem
    );
    font-size: var(--fluid-type);
  }

  *,
  *::after,
  *::before {
    box-sizing: border-box;
  }

  body {
    display: grid;
    place-items: center;
    background: linear-gradient(135deg, rgb(48, 0, 82) 0%, #1a0033 50%, black 100%);
    font-family: 'Geist', 'SF Pro Text', 'SF Pro Icons', 'AOS Icons', 'Helvetica Neue', Helvetica, Arial, sans-serif, system-ui;
    position: relative;
    overflow-x: hidden;
  }

  body::before {
    --size: 45px;
    --line: color-mix(in hsl, canvasText, transparent 85%);
    content: '';
    height: 100vh;
    width: 100%!important;
    position: fixed;
    background:
      linear-gradient(90deg, var(--line) 1px, transparent 1px var(--size)) 50% 50% / var(--size) var(--size),
      linear-gradient(var(--line) 1px, transparent 1px var(--size)) 50% 50% / var(--size) var(--size);
    mask: linear-gradient(-20deg, transparent 50%, white);
    top: 0;
    transform-style: flat;
    pointer-events: none;
    z-index: -1;
    animation: gridFloat 20s ease-in-out infinite;
  }

  @keyframes gridFloat {
    0%, 100% { transform: translateY(0) rotate(0deg); }
    50% { transform: translateY(-10px) rotate(0.5deg); }
  }

  .bear-link {
    color: canvasText;
    position: fixed;
    top: 1rem;
    left: 1rem;
    width: 48px;
    aspect-ratio: 1;
    display: grid;
    place-items: center;
    opacity: 0.8;
    transition: all 0.3s ease;
  }

  .ins{
    color: #ff6b6b;
    font-size: 18px;
    text-shadow: 0 0 20px rgba(255, 107, 107, 0.5);
    animation: pulse 2s ease-in-out infinite;
  }

  @keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.8; }
  }

  :where(.x-link, .bear-link):is(:hover, :focus-visible) {
    opacity: 1;
    transform: scale(1.1);
  }

  .bear-link svg {
    width: 75%;
  }

  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border-width: 0;
  }
}

div.tp-dfwv {
  position: fixed;
}

@media (max-width: 768px) {
  body {
    overflow-x: hidden;
  }

  [data-snap='true'] {
    scroll-snap-type: none !important;
  }

  .hed{
    font-size: 35px!important;
  }
 
  li{
    font-size: 18px;
    white-space: normal;
    word-wrap: break-word;
    hyphens: auto;
    max-width: calc(100vw - 40px);
  }

  section:first-of-type h2{
    font-size: 18px;
    margin-left: -30px; 
    display: flex;
    max-width: calc(100vw - 40px);
  }

  section:first-of-type {
    padding-left: 2rem;
    padding-right: 2rem;
  }

  header {
    padding-inline: 2rem;
  }

  .content {
    width: 100%;
    max-width: 100vw;
    box-sizing: border-box;
  }
}

@media (max-width: 480px) {
  body {
    overflow-x: hidden;
  }

  li {
    font-size: 16px;
    max-width: calc(100vw - 20px);
  }

  section:first-of-type h2 {
    font-size: 16px;
    max-width: calc(100vw - 20px);
  }

  section:first-of-type {
    padding-left: 1rem;
    padding-right: 1rem;
  }

  header {
    padding-inline: 1rem;
  }
}

.hed{
    font-size: 60px;
    color:white;
    font-family: 'Oleo Script', cursive;
    line-height: 150%;
    text-shadow: 0 0 30px rgba(255, 255, 255, 0.3);
}

.fluid{
  /* background: red; */
}

/* Enhanced scroll indicator */
.scroll-indicator {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 3px;
  background: linear-gradient(90deg, #ff6b6b, #4ecdc4, #45b7d1, #96ceb4);
  transform: scaleX(0);
  transform-origin: left;
  z-index: 1000;
  transition: transform 0.1s ease-out;
}

/* Smooth cursor trail effect */
.cursor-trail {
  position: fixed;
  width: 20px;
  height: 20px;
  border-radius: 50%;
  background: radial-gradient(circle, rgba(255,107,107,0.8), transparent);
  pointer-events: none;
  z-index: 9999;
  transition: all 0.1s ease-out;
  opacity: 0;
}

/* Performance optimization classes */
.will-change-transform {
  will-change: transform;
}

.will-change-opacity {
  will-change: opacity;
}
    </style>

    <!-- Scroll Progress Indicator -->
    <div class="scroll-indicator"></div>
    
    <!-- Cursor Trail -->
    <div class="cursor-trail"></div>

    <header>
      <h1 class="fluid hed">
        Complex tech problems?
        <br />
       <span class="ins">
         We solve them with the finesse of a skilled barber.
        </span> </h1>
    </header>
    <main>
      <section class="content fluid">
        <h2><span aria-hidden="true">We build &nbsp;</span>
          <span class="sr-only">you can ship things.</span>
        </h2>
     <ul aria-hidden="true" style="--count: 21" class="will-change-transform">
  <li style="--i: 0" class="will-change-opacity">custom software solutions.</li>
  <li style="--i: 1" class="will-change-opacity">scalable digital platforms.</li>
  <li style="--i: 2" class="will-change-opacity">smart automation tools.</li>
  <li style="--i: 3" class="will-change-opacity">modern user interfaces.</li>
  <li style="--i: 4" class="will-change-opacity">clean, maintainable code.</li>
  <li style="--i: 5" class="will-change-opacity">robust security systems.</li>
  <li style="--i: 6" class="will-change-opacity">fast cloud deployments.</li>
  <li style="--i: 7" class="will-change-opacity">real-time data dashboards.</li>
  <li style="--i: 8" class="will-change-opacity">integrated business tools.</li>
  <li style="--i: 9" class="will-change-opacity">intuitive mobile apps.</li>
  <li style="--i: 10" class="will-change-opacity">AI-powered solutions.</li>
  <li style="--i: 11" class="will-change-opacity">cross-platform products.</li>
  <li style="--i: 12" class="will-change-opacity">high-performance websites.</li>
  <li style="--i: 13" class="will-change-opacity">secure payment systems.</li>
  <li style="--i: 14" class="will-change-opacity">custom CRM solutions.</li>
  <li style="--i: 15" class="will-change-opacity">powerful SaaS products.</li>
  <li style="--i: 16" class="will-change-opacity">mission-critical systems.</li>
  <li style="--i: 17" class="will-change-opacity">backends that scale.</li>
  <li style="--i: 18" class="will-change-opacity">tools that save time.</li>
  <li style="--i: 19" class="will-change-opacity">responsive UI components.</li>
  <li style="--i: 20" class="will-change-opacity">API-driven ecosystems.</li>
</ul>

      </section>
      <section>
        <h2 class="fluid">Solved.</h2>
      </section>
    </main>
    <footer>ʕ⊙ᴥ⊙ʔ Gilvon Software Solutions &copy; 2025</footer>
   

  <script type="module" is:inline>
  document.addEventListener("DOMContentLoaded", async () => {
    const [
      { Pane },
      { default: gsap },
      { default: ScrollTrigger },
      { default: Lenis }
    ] = await Promise.all([
      import("https://cdn.skypack.dev/tweakpane@4.0.4"),
      import("https://cdn.skypack.dev/gsap@3.12.0"),
      import("https://cdn.skypack.dev/gsap@3.12.0/ScrollTrigger"),
      import("https://cdn.jsdelivr.net/npm/lenis@1.3.1")
    ]);

    gsap.registerPlugin(ScrollTrigger);

    // Enhanced Lenis configuration for professional smoothness
    const lenis = new Lenis({
      lerp: 0.08,
      smooth: true,
      direction: 'vertical',
      gestureDirection: 'vertical',
      smoothTouch: true,
      touchMultiplier: 2
    });

    lenis.on('scroll', ScrollTrigger.update);
    gsap.ticker.add((time) => {
      lenis.raf(time * 1000);
    });
    gsap.ticker.lagSmoothing(0);

    // Scroll progress indicator
    const scrollIndicator = document.querySelector('.scroll-indicator');
    lenis.on('scroll', ({ progress }) => {
      gsap.set(scrollIndicator, { scaleX: progress });
    });

    // Enhanced cursor trail
    const cursorTrail = document.querySelector('.cursor-trail');
    let mouseX = 0, mouseY = 0;
    
    document.addEventListener('mousemove', (e) => {
      mouseX = e.clientX;
      mouseY = e.clientY;
      
      gsap.to(cursorTrail, {
        x: mouseX - 10,
        y: mouseY - 10,
        opacity: 0.8,
        duration: 0.1,
        ease: "power2.out"
      });
    });

    document.addEventListener('mouseleave', () => {
      gsap.to(cursorTrail, { opacity: 0, duration: 0.3 });
    });

    const config = {
      theme: 'dark',
      animate: true,
      snap: true,
      start: gsap.utils.random(0, 100, 1),
      end: gsap.utils.random(900, 1000, 1),
      scroll: true,
      debug: false,
    };

    let items;
    let scrollerScrub;
    let dimmerScrub;
    let chromaEntry;
    let chromaExit;

    const update = () => {
      document.documentElement.dataset.theme = config.theme;
      document.documentElement.dataset.syncScrollbar = config.scroll;
      document.documentElement.dataset.animate = config.animate;
      document.documentElement.dataset.snap = config.snap;
      document.documentElement.dataset.debug = config.debug;
      document.documentElement.style.setProperty('--start', config.start);
      document.documentElement.style.setProperty('--hue', config.start);
      document.documentElement.style.setProperty('--end', config.end);

      if (!config.animate) {
        chromaEntry?.scrollTrigger.disable(true, false);
        chromaExit?.scrollTrigger.disable(true, false);
        dimmerScrub?.disable(true, false);
        scrollerScrub?.disable(true, false);
        gsap.set(items, { opacity: 1 });
        gsap.set(document.documentElement, { '--chroma': 0 });
      } else {
        gsap.set(items, { opacity: (i) => (i !== 0 ? 0.15 : 1) });
        dimmerScrub.enable(true, true);
        scrollerScrub.enable(true, true);
        chromaEntry.scrollTrigger.enable(true, true);
        chromaExit.scrollTrigger.enable(true, true);
      }
    };

    const sync = (event) => {
      if (
        !document.startViewTransition ||
        event.target.controller.view.labelElement.innerText !== 'Theme'
      ) return update();
      document.startViewTransition(() => update());
    };

    if (
      !CSS.supports('(animation-timeline: scroll()) and (animation-range: 0% 100%)')
    ) {
      items = gsap.utils.toArray('ul li');

      gsap.set(items, { 
        opacity: (i) => (i !== 0 ? 0.15 : 1),
        y: (i) => (i !== 0 ? 30 : 0),
        filter: (i) => (i !== 0 ? 'blur(2px)' : 'blur(0)')
      });

      // Enhanced animation timeline with professional easing
      const dimmer = gsap
        .timeline()
        .to(items.slice(1), {
          opacity: 1,
          y: 0,
          filter: 'blur(0) brightness(1.2) saturate(1.2)',
          stagger: 0.4,
          ease: "power3.out"
        })
        .to(
          items.slice(0, items.length - 1),
          {
            opacity: 0.15,
            y: -20,
            filter: 'blur(1px)',
            stagger: 0.4,
            ease: "power3.in"
          },
          0
        );

      dimmerScrub = ScrollTrigger.create({
        trigger: items[0],
        endTrigger: items[items.length - 1],
        start: 'center center',
        end: 'center center',
        animation: dimmer,
        scrub: 0.15,
        onUpdate: (self) => {
          // Add active class for visual indicators
          const activeIndex = Math.round(self.progress * (items.length - 1));
          items.forEach((item, index) => {
            item.classList.toggle('active', index === activeIndex);
          });
        }
      });

      const scroller = gsap.timeline().fromTo(
        document.documentElement,
        {
          '--hue': config.start,
        },
        {
          '--hue': config.end,
          ease: 'power2.inOut',
        }
      );

      scrollerScrub = ScrollTrigger.create({
        trigger: items[0],
        endTrigger: items[items.length - 1],
        start: 'center center',
        end: 'center center',
        animation: scroller,
        scrub: 0.15,
      });

      chromaEntry = gsap.fromTo(
        document.documentElement,
        {
          '--chroma': 0,
        },
        {
          '--chroma': 0.35,
          ease: 'power2.out',
          scrollTrigger: {
            scrub: 0.15,
            trigger: items[0],
            start: 'center center+=60',
            end: 'center center',
          },
        }
      );

      chromaExit = gsap.fromTo(
        document.documentElement,
        {
          '--chroma': 0.35,
        },
        {
          '--chroma': 0,
          ease: 'power2.in',
          scrollTrigger: {
            scrub: 0.15,
            trigger: items[items.length - 2],
            start: 'center center',
            end: 'center center-=60',
          },
        }
      );

      // Add parallax effect to header
      gsap.to('.hed', {
        y: -100,
        opacity: 0.8,
        scrollTrigger: {
          trigger: 'header',
          start: 'top top',
          end: 'bottom top',
          scrub: 1,
        }
      });
    }

    update();

    // Add intersection observer for performance
    const observerOptions = {
      threshold: 0.1,
      rootMargin: '50px'
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.style.willChange = 'transform, opacity';
        } else {
          entry.target.style.willChange = 'auto';
        }
      });
    }, observerOptions);

    // Observe all list items for performance optimization
    items?.forEach(item => observer.observe(item));
  });
</script>
</body>
</html>